{
  "api/VulcanAI.Core.Agent.Agent.html": {
    "href": "api/VulcanAI.Core.Agent.Agent.html",
    "title": "Class Agent | VulcanAI",
    "keywords": "Class Agent Namespace VulcanAI.Core.Agent Assembly VulcanAI.dll Represents an AI agent that can process messages and generate responses using a language model. The agent maintains conversation history and context, which is persisted to disk periodically and loaded when the agent is restarted. public class Agent : IDisposable Inheritance object Agent Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Agent(ILLMClient, ILogger<Agent>, string, IMessageInterface, string, Dictionary<string, string>?) Initializes a new instance of the Agent class with the specified parameters. public Agent(ILLMClient llmClient, ILogger<Agent> logger, string systemPrompt, IMessageInterface messageInterface, string agentName = \"Agent\", Dictionary<string, string>? contextFields = null) Parameters llmClient ILLMClient The language model client to use for generating responses. logger ILogger<Agent> The logger instance for this agent. systemPrompt string The system prompt that defines the agent's behavior and personality. messageInterface IMessageInterface The message interface for sending and receiving messages. agentName string The name of the agent. Used for context persistence and logging. contextFields Dictionary<string, string> Optional initial context fields for the agent. Remarks This constructor: Attempts to load existing context from a JSON file named {agentName}.context.json Creates a new context if none exists, using the provided system prompt and context fields Updates the context with any new system prompt or context fields provided Sets up periodic context persistence (every 5 minutes) Subscribes to message events from the message interface Agent(ILLMClient, ILogger<Agent>, AgentConfig, IMessageInterface, Dictionary<string, string>?) public Agent(ILLMClient llmClient, ILogger<Agent> logger, AgentConfig config, IMessageInterface messageInterface, Dictionary<string, string>? contextFields = null) Parameters llmClient ILLMClient logger ILogger<Agent> config AgentConfig messageInterface IMessageInterface contextFields Dictionary<string, string> Properties Context Gets the context fields of the agent. public IReadOnlyDictionary<string, string> Context { get; } Property Value IReadOnlyDictionary<string, string> ConversationHistory Gets the conversation history of the agent. public Message[] ConversationHistory { get; } Property Value Message[] MaxPeriodicMessageIntervalMinutes Gets or sets the maximum interval in minutes for periodic messages. public int MaxPeriodicMessageIntervalMinutes { get; set; } Property Value int MinPeriodicMessageIntervalMinutes Gets or sets the minimum interval in minutes for periodic messages. public int MinPeriodicMessageIntervalMinutes { get; set; } Property Value int Methods Dispose() Disposes of the agent's resources. public void Dispose() Remarks This method: Stops the context persistence timer Performs a final save of the context to disk Releases any other unmanaged resources FromJson(ILLMClient, ILogger<Agent>, string, IMessageInterface?, string) Creates a new agent instance from a serialized context. public static Agent FromJson(ILLMClient llmClient, ILogger<Agent> logger, string json, IMessageInterface? messageInterface = null, string agentName = \"Agent\") Parameters llmClient ILLMClient The language model client to use. logger ILogger<Agent> The logger instance to use. json string The JSON string containing the serialized context. messageInterface IMessageInterface Optional message interface to use. agentName string Optional name for the agent. Returns Agent A new instance of Agent with the deserialized context. Remarks This method is used to create a new agent instance from a previously serialized context. The agent name can be different from the one used when the context was serialized. Exceptions InvalidOperationException Thrown when the JSON cannot be deserialized into an AgentContext. RemoveContext(string) Removes a value from the agent's context. public bool RemoveContext(string key) Parameters key string The key to remove. Returns bool True if the key was found and removed, false otherwise. SendMessageAsync(string) Sends a message through the message interface and adds it to the conversation history. public Task SendMessageAsync(string content) Parameters content string The content of the message to send. Returns Task A task that represents the asynchronous operation. Remarks The message is added to the conversation history before being sent through the message interface. This ensures that the agent's responses are included in future prompts. Exceptions ArgumentNullException Thrown when the content is null or empty. InvalidOperationException Thrown when the message interface is not configured. SendPromptAsync(string) Sends a prompt to the language model and returns its response. public Task<string> SendPromptAsync(string prompt) Parameters prompt string The prompt to send. Returns Task<string> A task that represents the asynchronous operation. The task result contains the model's response. Remarks This method sends a prompt to the language model and returns its response. The response is added to the conversation history and the context is persisted to disk. Exceptions ArgumentNullException Thrown when the prompt is null or empty. InvalidOperationException Thrown when the prompt exceeds the maximum length or when no completion is returned. SendPromptAsync<T>(string, Dictionary<string, object>?) Sends a prompt to the language model and returns its response as a strongly-typed object. public Task<T> SendPromptAsync<T>(string prompt, Dictionary<string, object>? options = null) where T : class Parameters prompt string The prompt to send. options Dictionary<string, object> Optional parameters for the completion request. Returns Task<T> A task that represents the asynchronous operation. The task result contains the deserialized response. Type Parameters T The type to deserialize the response into. Remarks This method sends a prompt to the language model and returns its response as a strongly-typed object. The response is added to the conversation history and the context is persisted to disk. Exceptions ArgumentNullException Thrown when the prompt is null or empty. InvalidOperationException Thrown when the prompt exceeds the maximum length or when no completion is returned. SetContext(string, object) Sets a value in the agent's context. public void SetContext(string key, object value) Parameters key string The key to set. value object The value to set. ToJson() Serializes the agent's context to a JSON string. public string ToJson() Returns string A JSON string representing the agent's context. Remarks The serialized context includes the system prompt, conversation history, and context fields. This is the same format used for persisting the context to disk."
  },
  "api/VulcanAI.Core.Agent.AgentContext.html": {
    "href": "api/VulcanAI.Core.Agent.AgentContext.html",
    "title": "Class AgentContext | VulcanAI",
    "keywords": "Class AgentContext Namespace VulcanAI.Core.Agent Assembly VulcanAI.dll Represents the context of an agent, including its system prompt, conversation history, and context fields. The context manages token limits by removing older messages when needed to stay within the maximum token count. public class AgentContext Inheritance object AgentContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AgentContext(string, ILogger<AgentContext>, Dictionary<string, string>?) Initializes a new instance of the AgentContext class. public AgentContext(string systemPrompt, ILogger<AgentContext> logger, Dictionary<string, string>? initialContextFields = null) Parameters systemPrompt string The system prompt that defines the agent's behavior and personality. logger ILogger<AgentContext> The logger instance for recording diagnostic information. initialContextFields Dictionary<string, string> Optional initial context fields for the agent. Remarks The system prompt is required and cannot be changed after creation. Context fields can be added, modified, or removed at any time. Properties ContextFields Gets the context fields as a read-only dictionary. public IReadOnlyDictionary<string, string> ContextFields { get; } Property Value IReadOnlyDictionary<string, string> Remarks Context fields are used to store additional information that can be referenced in prompts and responses. They are always included in the context and are not affected by the token limit. ConversationHistory Gets the conversation history as a read-only array of messages. public Message[] ConversationHistory { get; } Property Value Message[] Remarks The conversation history includes all messages sent and received by the agent. When serializing to JSON, older messages may be removed to stay within the token limit. MaxTokens Gets or sets the maximum number of tokens allowed in the context. public int MaxTokens { get; set; } Property Value int Remarks This value is used to limit the size of the context when serializing to JSON. When the context exceeds this limit, older messages are removed from the conversation history until the context is within the limit. The default value is 4096 tokens. SystemPrompt Gets the system prompt that defines the agent's behavior and personality. public string SystemPrompt { get; } Property Value string Remarks The system prompt is always included in the context and is not affected by the token limit. It should be concise but descriptive enough to guide the agent's behavior. Methods AddMessage(Message) Adds a message to the conversation history. public void AddMessage(Message message) Parameters message Message The message to add. Remarks Messages are added to the end of the conversation history. When serializing to JSON, older messages may be removed to stay within the token limit. FromJson(string, ILogger<AgentContext>) Creates a new context from a JSON string. public static AgentContext FromJson(string json, ILogger<AgentContext> logger) Parameters json string The JSON string to deserialize. logger ILogger<AgentContext> The logger instance for recording diagnostic information. Returns AgentContext A new instance of AgentContext with the deserialized data. Remarks The JSON string should be in the format produced by the ToJson() method. The deserialized context will have the same system prompt, context fields, and conversation history as the original context, subject to the token limit. Exceptions InvalidOperationException Thrown when the JSON cannot be deserialized into an AgentContext. GetContextField(string) Gets a context field value. public string? GetContextField(string key) Parameters key string The key of the context field. Returns string The value of the context field, or null if not found. Remarks Context fields are used to store additional information that can be referenced in prompts and responses. They are always included in the context and are not affected by the token limit. GetTokenCount(string) Calculates the token count for a given text string. public int GetTokenCount(string text) Parameters text string The text to calculate tokens for. Returns int The number of tokens in the text. Remarks This method uses a more accurate token estimation based on the actual tokenization used by language models: Words are split into subwords using common patterns Punctuation is generally part of the same token as the word Numbers are generally part of the same token as the word Special characters and whitespace are counted separately GetTokenCount(AgentContextData) Calculates the token count for a given context data object. public int GetTokenCount(AgentContextData contextData) Parameters contextData AgentContextData The context data to calculate tokens for. Returns int The total number of tokens in the context data. Remarks This method calculates tokens for: The system prompt All context fields (key + value) All messages in the conversation history JSON structure overhead (estimated based on actual JSON structure) RemoveContextField(string) Removes a context field. public bool RemoveContextField(string key) Parameters key string The key of the context field to remove. Returns bool True if the field was removed, false if it didn't exist. Remarks Context fields are used to store additional information that can be referenced in prompts and responses. They are always included in the context and are not affected by the token limit. SetContextField(string, string) Sets a context field value. public void SetContextField(string key, string value) Parameters key string The key of the context field. value string The value to set. Remarks If the key already exists, its value will be updated. Context fields are always included in the context and are not affected by the token limit. ToJson() Serializes the context to a JSON string, respecting the maximum token limit. public string ToJson() Returns string A JSON string representing the context, with older messages removed if necessary to stay within token limits. Remarks The serialized context includes: The system prompt Any context fields The conversation history (with older messages removed if needed to stay within token limits) The token limit is enforced by removing older messages from the conversation history until the context is within the limit. The system prompt and context fields are always included."
  },
  "api/VulcanAI.Core.Agent.html": {
    "href": "api/VulcanAI.Core.Agent.html",
    "title": "Namespace VulcanAI.Core.Agent | VulcanAI",
    "keywords": "Namespace VulcanAI.Core.Agent Classes Agent Represents an AI agent that can process messages and generate responses using a language model. The agent maintains conversation history and context, which is persisted to disk periodically and loaded when the agent is restarted. AgentContext Represents the context of an agent, including its system prompt, conversation history, and context fields. The context manages token limits by removing older messages when needed to stay within the maximum token count."
  },
  "api/VulcanAI.Core.AgentContextData.html": {
    "href": "api/VulcanAI.Core.AgentContextData.html",
    "title": "Class AgentContextData | VulcanAI",
    "keywords": "Class AgentContextData Namespace VulcanAI.Core Assembly VulcanAI.dll Represents the data structure used for serializing and deserializing the agent context. public class AgentContextData Inheritance object AgentContextData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContextFields Gets or sets the context fields. [JsonRequired] public Dictionary<string, string> ContextFields { get; set; } Property Value Dictionary<string, string> ConversationHistory Gets or sets the conversation history. [JsonRequired] public List<Message> ConversationHistory { get; set; } Property Value List<Message> SystemPrompt Gets or sets the system prompt. [JsonRequired] public string SystemPrompt { get; set; } Property Value string"
  },
  "api/VulcanAI.Core.Configuration.AgentConfig.html": {
    "href": "api/VulcanAI.Core.Configuration.AgentConfig.html",
    "title": "Class AgentConfig | VulcanAI",
    "keywords": "Class AgentConfig Namespace VulcanAI.Core.Configuration Assembly VulcanAI.dll public class AgentConfig Inheritance object AgentConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name public string Name { get; set; } Property Value string SystemPrompt public string SystemPrompt { get; set; } Property Value string"
  },
  "api/VulcanAI.Core.Configuration.DiscordConfig.html": {
    "href": "api/VulcanAI.Core.Configuration.DiscordConfig.html",
    "title": "Class DiscordConfig | VulcanAI",
    "keywords": "Class DiscordConfig Namespace VulcanAI.Core.Configuration Assembly VulcanAI.dll public class DiscordConfig Inheritance object DiscordConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId public ulong ChannelId { get; set; } Property Value ulong Token public string Token { get; set; } Property Value string"
  },
  "api/VulcanAI.Core.Configuration.html": {
    "href": "api/VulcanAI.Core.Configuration.html",
    "title": "Namespace VulcanAI.Core.Configuration | VulcanAI",
    "keywords": "Namespace VulcanAI.Core.Configuration Classes AgentConfig DiscordConfig"
  },
  "api/VulcanAI.Core.Interfaces.ConsoleInterface.html": {
    "href": "api/VulcanAI.Core.Interfaces.ConsoleInterface.html",
    "title": "Class ConsoleInterface | VulcanAI",
    "keywords": "Class ConsoleInterface Namespace VulcanAI.Core.Interfaces Assembly VulcanAI.dll Implements the IMessageInterface for console-based communication. This interface allows the agent to send and receive messages through the system console. Messages are displayed in the format [Sender] Content, and user input is captured when Enter is pressed. public class ConsoleInterface : IMessageInterface Inheritance object ConsoleInterface Implements IMessageInterface Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The ConsoleInterface provides a simple way to interact with the agent through the command line. It runs a background task to continuously read user input and raises events when messages are received. All operations are asynchronous and include proper logging for debugging and monitoring. Constructors ConsoleInterface(ILogger<ConsoleInterface>) Initializes a new instance of the ConsoleInterface class. public ConsoleInterface(ILogger<ConsoleInterface> logger) Parameters logger ILogger<ConsoleInterface> The logger instance for recording diagnostic information. Exceptions ArgumentNullException Thrown when the logger parameter is null. Methods SendMessageAsync(Message) Sends a message to the console output. public Task SendMessageAsync(Message message) Parameters message Message The message to send. Returns Task A task representing the asynchronous operation. Remarks Messages are displayed in the format [Sender] Content. This method is thread-safe and can be called from any thread. StartAsync() Starts the console interface and begins listening for user input. public Task StartAsync() Returns Task A task representing the asynchronous operation. Remarks This method starts a background task that continuously reads input from the console. If the interface is already running, this method returns immediately. StopAsync() Stops the console interface and stops listening for user input. public Task StopAsync() Returns Task A task representing the asynchronous operation. Remarks This method stops the background input reading task and waits for it to complete. If the interface is not running, this method returns immediately. Events OnMessageReceived Occurs when a message is received from the console input. public event EventHandler<Message>? OnMessageReceived Event Type EventHandler<Message> Remarks This event is raised whenever the user types a message and presses Enter. The message sender is set to \"User\" and the channel is set to \"Console\"."
  },
  "api/VulcanAI.Core.Interfaces.DiscordInterface.html": {
    "href": "api/VulcanAI.Core.Interfaces.DiscordInterface.html",
    "title": "Class DiscordInterface | VulcanAI",
    "keywords": "Class DiscordInterface Namespace VulcanAI.Core.Interfaces Assembly VulcanAI.dll public class DiscordInterface : IMessageInterface Inheritance object DiscordInterface Implements IMessageInterface Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DiscordInterface(DiscordSocketClient, ILogger<DiscordInterface>, string, ulong) public DiscordInterface(DiscordSocketClient client, ILogger<DiscordInterface> logger, string token, ulong channelId) Parameters client DiscordSocketClient logger ILogger<DiscordInterface> token string channelId ulong Methods SendMessageAsync(Message) Sends a message through the interface. public Task SendMessageAsync(Message message) Parameters message Message The message to send. Returns Task A task representing the asynchronous operation. StartAsync() Starts the message interface. public Task StartAsync() Returns Task A task representing the asynchronous operation. StopAsync() Stops the message interface. public Task StopAsync() Returns Task A task representing the asynchronous operation. Events OnMessageReceived Occurs when a message is received from the interface. public event EventHandler<Message>? OnMessageReceived Event Type EventHandler<Message>"
  },
  "api/VulcanAI.Core.Interfaces.IHttpClient.html": {
    "href": "api/VulcanAI.Core.Interfaces.IHttpClient.html",
    "title": "Interface IHttpClient | VulcanAI",
    "keywords": "Interface IHttpClient Namespace VulcanAI.Core.Interfaces Assembly VulcanAI.dll public interface IHttpClient Methods PostAsync(string, HttpContent) Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content) Parameters requestUri string content HttpContent Returns Task<HttpResponseMessage>"
  },
  "api/VulcanAI.Core.Interfaces.IKnowledgeStore.html": {
    "href": "api/VulcanAI.Core.Interfaces.IKnowledgeStore.html",
    "title": "Interface IKnowledgeStore | VulcanAI",
    "keywords": "Interface IKnowledgeStore Namespace VulcanAI.Core.Interfaces Assembly VulcanAI.dll Defines the interface for a knowledge store that can store and retrieve knowledge items. public interface IKnowledgeStore Remarks This interface provides the core functionality for managing knowledge in the system, including querying, adding, and lifecycle management of the knowledge store. Implementations should be thread-safe and handle concurrent access appropriately. Methods AddKnowledgeAsync(Knowledge) Adds a new knowledge item to the store. Task AddKnowledgeAsync(Knowledge knowledge) Parameters knowledge Knowledge The knowledge item to add. Returns Task A task that represents the asynchronous operation. Exceptions ArgumentNullException Thrown when knowledge is null. QueryKnowledgeAsync(string, int?) Queries the knowledge store for relevant knowledge items based on the provided query. Task<KnowledgeCollection> QueryKnowledgeAsync(string query, int? maxResults = null) Parameters query string The search query string. maxResults int? The maximum number of results to return. If null, returns all results. Returns Task<KnowledgeCollection> A task that represents the asynchronous operation. The task result contains a KnowledgeCollection of relevant knowledge items sorted by relevance. Exceptions ArgumentNullException Thrown when query is null. ArgumentException Thrown when query is empty or whitespace. StartAsync() Starts the knowledge store and performs any necessary initialization. Task StartAsync() Returns Task A task that represents the asynchronous operation. Exceptions InvalidOperationException Thrown when the store is already started. StopAsync() Stops the knowledge store and performs any necessary cleanup. Task StopAsync() Returns Task A task that represents the asynchronous operation. Exceptions InvalidOperationException Thrown when the store is not started."
  },
  "api/VulcanAI.Core.Interfaces.IMessageInterface.html": {
    "href": "api/VulcanAI.Core.Interfaces.IMessageInterface.html",
    "title": "Interface IMessageInterface | VulcanAI",
    "keywords": "Interface IMessageInterface Namespace VulcanAI.Core.Interfaces Assembly VulcanAI.dll Defines the interface for message-based communication systems. public interface IMessageInterface Methods SendMessageAsync(Message) Sends a message through the interface. Task SendMessageAsync(Message message) Parameters message Message The message to send. Returns Task A task representing the asynchronous operation. StartAsync() Starts the message interface. Task StartAsync() Returns Task A task representing the asynchronous operation. StopAsync() Stops the message interface. Task StopAsync() Returns Task A task representing the asynchronous operation. Events OnMessageReceived Occurs when a message is received from the interface. event EventHandler<Message> OnMessageReceived Event Type EventHandler<Message>"
  },
  "api/VulcanAI.Core.Interfaces.Message.html": {
    "href": "api/VulcanAI.Core.Interfaces.Message.html",
    "title": "Class Message | VulcanAI",
    "keywords": "Class Message Namespace VulcanAI.Core.Interfaces Assembly VulcanAI.dll Represents a message in the chat system with metadata about the sender and timing. public record Message : IEquatable<Message> Inheritance object Message Implements IEquatable<Message> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Message(string, string, string?) Initializes a new instance of the Message class. public Message(string content, string sender, string? channel = null) Parameters content string The content of the message. sender string The name of the message sender. channel string The optional channel name where the message was sent. Properties Channel Gets the optional channel name where the message was sent. public string? Channel { get; init; } Property Value string Content Gets the content of the message. public string Content { get; init; } Property Value string Sender Gets the name of the message sender. public string Sender { get; init; } Property Value string Timestamp Gets the timestamp when the message was created. public DateTime Timestamp { get; init; } Property Value DateTime"
  },
  "api/VulcanAI.Core.Interfaces.NullMessageInterface.html": {
    "href": "api/VulcanAI.Core.Interfaces.NullMessageInterface.html",
    "title": "Class NullMessageInterface | VulcanAI",
    "keywords": "Class NullMessageInterface Namespace VulcanAI.Core.Interfaces Assembly VulcanAI.dll A null implementation of IMessageInterface that does nothing. This is used when no message interface is provided, to avoid null references. public class NullMessageInterface : IMessageInterface Inheritance object NullMessageInterface Implements IMessageInterface Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SendMessageAsync(Message) Sends a message through the interface. public Task SendMessageAsync(Message message) Parameters message Message The message to send. Returns Task A task representing the asynchronous operation. StartAsync() Starts the message interface. public Task StartAsync() Returns Task A task representing the asynchronous operation. StopAsync() Stops the message interface. public Task StopAsync() Returns Task A task representing the asynchronous operation. Events OnMessageReceived Occurs when a message is received from the interface. public event EventHandler<Message>? OnMessageReceived Event Type EventHandler<Message>"
  },
  "api/VulcanAI.Core.Interfaces.html": {
    "href": "api/VulcanAI.Core.Interfaces.html",
    "title": "Namespace VulcanAI.Core.Interfaces | VulcanAI",
    "keywords": "Namespace VulcanAI.Core.Interfaces Classes ConsoleInterface Implements the IMessageInterface for console-based communication. This interface allows the agent to send and receive messages through the system console. Messages are displayed in the format [Sender] Content, and user input is captured when Enter is pressed. DiscordInterface Message Represents a message in the chat system with metadata about the sender and timing. NullMessageInterface A null implementation of IMessageInterface that does nothing. This is used when no message interface is provided, to avoid null references. Interfaces IHttpClient IKnowledgeStore Defines the interface for a knowledge store that can store and retrieve knowledge items. IMessageInterface Defines the interface for message-based communication systems."
  },
  "api/VulcanAI.Core.Knowledge.Knowledge.html": {
    "href": "api/VulcanAI.Core.Knowledge.Knowledge.html",
    "title": "Class Knowledge | VulcanAI",
    "keywords": "Class Knowledge Namespace VulcanAI.Core.Knowledge Assembly VulcanAI.dll Represents a piece of knowledge with its content and origin information. public record Knowledge : IEquatable<Knowledge> Inheritance object Knowledge Implements IEquatable<Knowledge> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This record type is immutable and represents a single piece of knowledge that can be stored and retrieved from the knowledge store. The content represents the actual knowledge, while the origin provides metadata about where this knowledge came from. Constructors Knowledge(string, string) Initializes a new instance of the Knowledge record. public Knowledge(string content, string origin) Parameters content string The content of the knowledge. origin string The origin of the knowledge. Exceptions ArgumentNullException Thrown when content or origin is null. ArgumentException Thrown when content or origin is empty or whitespace. Properties Content Gets the content of the knowledge. public string Content { get; init; } Property Value string The textual content representing the knowledge. CreatedAt Gets the timestamp when this knowledge was created. public DateTimeOffset CreatedAt { get; init; } Property Value DateTimeOffset The creation timestamp in UTC. Origin Gets the origin of the knowledge. public string Origin { get; init; } Property Value string A string describing where this knowledge came from."
  },
  "api/VulcanAI.Core.Knowledge.KnowledgeCollection.html": {
    "href": "api/VulcanAI.Core.Knowledge.KnowledgeCollection.html",
    "title": "Class KnowledgeCollection | VulcanAI",
    "keywords": "Class KnowledgeCollection Namespace VulcanAI.Core.Knowledge Assembly VulcanAI.dll Represents a collection of knowledge items with associated relevance scores. public class KnowledgeCollection : IEnumerable<(double Score, Knowledge Knowledge)>, IEnumerable Inheritance object KnowledgeCollection Implements IEnumerable<(double Score, Knowledge Knowledge)> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class maintains a sorted collection of knowledge items where each item has an associated relevance score. The collection is always kept sorted in descending order by score. It supports serialization to and from JSON format. The collection is thread-safe for read operations, but write operations should be synchronized externally if used in a multi-threaded context. Properties Count Gets the number of knowledge items in the collection. public int Count { get; } Property Value int The total count of knowledge items. this[int] Gets the knowledge item at the specified index. public (double Score, Knowledge Knowledge) this[int index] { get; } Parameters index int The zero-based index of the item to retrieve. Property Value (double Score, Knowledge Knowledge) A tuple containing the score and knowledge item at the specified index. Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. Methods Add(Knowledge, double) Adds a new knowledge item to the collection with the specified relevance score. public void Add(Knowledge knowledge, double score) Parameters knowledge Knowledge The knowledge item to add. score double The relevance score of the knowledge item. Remarks The item is inserted in the correct position to maintain the collection's sorted order by score in descending order. If the score is NaN or infinity, it will be treated as 0.0. Exceptions ArgumentNullException Thrown when knowledge is null. ArgumentException Thrown when score is not a valid number. Clear() Removes all knowledge items from the collection. public void Clear() DeserializeFromJson(string) Deserializes a knowledge collection from a JSON string. public static KnowledgeCollection DeserializeFromJson(string json) Parameters json string The JSON string to deserialize. Returns KnowledgeCollection A new instance of KnowledgeCollection containing the deserialized items. Exceptions ArgumentNullException Thrown when json is null. JsonException Thrown when the JSON string is invalid. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<(double Score, Knowledge Knowledge)> GetEnumerator() Returns IEnumerator<(double Score, Knowledge Knowledge)> An enumerator that can be used to iterate through the collection. GetTopItems(int) Gets a slice of the knowledge collection with the highest relevance scores. public KnowledgeCollection GetTopItems(int count) Parameters count int The maximum number of items to return. Returns KnowledgeCollection A new collection containing the top items by score. Exceptions ArgumentOutOfRangeException Thrown when count is negative. SerializeToJson() Serializes the knowledge collection to a JSON string. public string SerializeToJson() Returns string A JSON string representation of the knowledge collection. Remarks The JSON output is formatted with indentation for better readability. The serialization includes all knowledge items with their scores."
  },
  "api/VulcanAI.Core.Knowledge.ObsidianKnowledge.html": {
    "href": "api/VulcanAI.Core.Knowledge.ObsidianKnowledge.html",
    "title": "Class ObsidianKnowledge | VulcanAI",
    "keywords": "Class ObsidianKnowledge Namespace VulcanAI.Core.Knowledge Assembly VulcanAI.dll Implementation of IKnowledgeStore that uses ObsidianDB as the underlying storage. public class ObsidianKnowledge : IKnowledgeStore Inheritance object ObsidianKnowledge Implements IKnowledgeStore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides a bridge between the VulcanAI knowledge system and Obsidian vaults. It allows querying and managing knowledge stored in Obsidian markdown files. Constructors ObsidianKnowledge(string) Initializes a new instance of the ObsidianKnowledge class. public ObsidianKnowledge(string vaultPath) Parameters vaultPath string The path to the Obsidian vault directory. Exceptions ArgumentNullException Thrown when vaultPath is null or empty. DirectoryNotFoundException Thrown when the vault directory does not exist. Methods AddKnowledgeAsync(Knowledge) Adds a new knowledge item to the store. public Task AddKnowledgeAsync(Knowledge knowledge) Parameters knowledge Knowledge The knowledge item to add. Returns Task A task that represents the asynchronous operation. Exceptions ArgumentNullException Thrown when knowledge is null. InvalidOperationException Thrown when the store is not started. NotImplementedException Thrown as this feature is not yet implemented in ObsidianDB. QueryKnowledgeAsync(string, int?) Queries the knowledge store for relevant knowledge items based on the provided query. public Task<KnowledgeCollection> QueryKnowledgeAsync(string query, int? maxResults = null) Parameters query string The search query string. maxResults int? The maximum number of results to return. If null, returns all results. Returns Task<KnowledgeCollection> A task that represents the asynchronous operation. The task result contains a KnowledgeCollection of relevant knowledge items sorted by relevance. Exceptions ArgumentNullException Thrown when query is null. ArgumentException Thrown when query is empty or whitespace. InvalidOperationException Thrown when the store is not started. StartAsync() Starts the knowledge store and performs any necessary initialization. public Task StartAsync() Returns Task A task that represents the asynchronous operation. Exceptions InvalidOperationException Thrown when the store is already started. StopAsync() Stops the knowledge store and performs any necessary cleanup. public Task StopAsync() Returns Task A task that represents the asynchronous operation. Exceptions InvalidOperationException Thrown when the store is not started."
  },
  "api/VulcanAI.Core.Knowledge.html": {
    "href": "api/VulcanAI.Core.Knowledge.html",
    "title": "Namespace VulcanAI.Core.Knowledge | VulcanAI",
    "keywords": "Namespace VulcanAI.Core.Knowledge Classes Knowledge Represents a piece of knowledge with its content and origin information. KnowledgeCollection Represents a collection of knowledge items with associated relevance scores. ObsidianKnowledge Implementation of IKnowledgeStore that uses ObsidianDB as the underlying storage."
  },
  "api/VulcanAI.Core.LLM.GeminiClient.html": {
    "href": "api/VulcanAI.Core.LLM.GeminiClient.html",
    "title": "Class GeminiClient | VulcanAI",
    "keywords": "Class GeminiClient Namespace VulcanAI.Core.LLM Assembly VulcanAI.dll public class GeminiClient : LLMClient, ILLMClient Inheritance object LLMClient GeminiClient Implements ILLMClient Inherited Members LLMClient._httpClient LLMClient._logger LLMClient._jsonOptions LLMClient.MaxPromptLength LLMClient.GetCompletionAsync<T>(string, Dictionary<string, object>) LLMClient.SendRequestAsync(string, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GeminiClient(HttpClient, string, string, string, ILogger?) public GeminiClient(HttpClient httpClient, string apiKey, string model = \"gemini-pro\", string baseUrl = \"https://generativelanguage.googleapis.com/v1beta\", ILogger? logger = null) Parameters httpClient HttpClient apiKey string model string baseUrl string logger ILogger Methods GetCompletionAsync(string) Gets a completion from the LLM public override Task<string> GetCompletionAsync(string prompt) Parameters prompt string The prompt to send to the LLM Returns Task<string> The completion from the LLM Exceptions ArgumentNullException Thrown when the prompt is null or empty InvalidOperationException Thrown when the prompt length exceeds MaxPromptLength"
  },
  "api/VulcanAI.Core.LLM.HttpClientWrapper.html": {
    "href": "api/VulcanAI.Core.LLM.HttpClientWrapper.html",
    "title": "Class HttpClientWrapper | VulcanAI",
    "keywords": "Class HttpClientWrapper Namespace VulcanAI.Core.LLM Assembly VulcanAI.dll Wrapper class that implements IHttpClient by delegating to a real HttpClient instance. public class HttpClientWrapper : IHttpClient Inheritance object HttpClientWrapper Implements IHttpClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HttpClientWrapper(HttpClient) public HttpClientWrapper(HttpClient httpClient) Parameters httpClient HttpClient Methods PostAsync(string, HttpContent) public Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content) Parameters requestUri string content HttpContent Returns Task<HttpResponseMessage>"
  },
  "api/VulcanAI.Core.LLM.ILLMClient.html": {
    "href": "api/VulcanAI.Core.LLM.ILLMClient.html",
    "title": "Interface ILLMClient | VulcanAI",
    "keywords": "Interface ILLMClient Namespace VulcanAI.Core.LLM Assembly VulcanAI.dll Interface for LLM clients public interface ILLMClient Properties MaxPromptLength Maximum length of the prompt that can be sent to the LLM int MaxPromptLength { get; set; } Property Value int Methods GetCompletionAsync(string) Gets a completion from the LLM Task<string> GetCompletionAsync(string prompt) Parameters prompt string The prompt to send to the LLM Returns Task<string> The completion from the LLM Exceptions ArgumentNullException Thrown when the prompt is null or empty InvalidOperationException Thrown when the prompt length exceeds MaxPromptLength GetCompletionAsync<T>(string, Dictionary<string, object>?) Gets a completion from the LLM and deserializes it into the specified type Task<T> GetCompletionAsync<T>(string prompt, Dictionary<string, object>? options = null) where T : class Parameters prompt string The prompt to send to the LLM options Dictionary<string, object> Additional options for the completion Returns Task<T> The deserialized completion Type Parameters T The type to deserialize the completion into Exceptions ArgumentNullException Thrown when the prompt is null or empty InvalidOperationException Thrown when the prompt length exceeds MaxPromptLength or deserialization fails"
  },
  "api/VulcanAI.Core.LLM.LLMClient.html": {
    "href": "api/VulcanAI.Core.LLM.LLMClient.html",
    "title": "Class LLMClient | VulcanAI",
    "keywords": "Class LLMClient Namespace VulcanAI.Core.LLM Assembly VulcanAI.dll public abstract class LLMClient : ILLMClient Inheritance object LLMClient Implements ILLMClient Derived GeminiClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LLMClient(HttpClient, ILogger?) protected LLMClient(HttpClient httpClient, ILogger? logger = null) Parameters httpClient HttpClient logger ILogger Fields _httpClient protected readonly HttpClient _httpClient Field Value HttpClient _jsonOptions protected readonly JsonSerializerOptions _jsonOptions Field Value JsonSerializerOptions _logger protected readonly ILogger? _logger Field Value ILogger Properties MaxPromptLength Maximum length of the prompt that can be sent to the LLM public int MaxPromptLength { get; set; } Property Value int Methods GetCompletionAsync(string) Gets a completion from the LLM public abstract Task<string> GetCompletionAsync(string prompt) Parameters prompt string The prompt to send to the LLM Returns Task<string> The completion from the LLM Exceptions ArgumentNullException Thrown when the prompt is null or empty InvalidOperationException Thrown when the prompt length exceeds MaxPromptLength GetCompletionAsync<T>(string, Dictionary<string, object>?) Gets a completion from the LLM and deserializes it into the specified type public Task<T> GetCompletionAsync<T>(string prompt, Dictionary<string, object>? options = null) where T : class Parameters prompt string The prompt to send to the LLM options Dictionary<string, object> Additional options for the completion Returns Task<T> The deserialized completion Type Parameters T The type to deserialize the completion into Exceptions ArgumentNullException Thrown when the prompt is null or empty InvalidOperationException Thrown when the prompt length exceeds MaxPromptLength or deserialization fails SendRequestAsync(string, object) protected Task<string> SendRequestAsync(string endpoint, object requestBody) Parameters endpoint string requestBody object Returns Task<string>"
  },
  "api/VulcanAI.Core.LLM.LocalLLMClient.html": {
    "href": "api/VulcanAI.Core.LLM.LocalLLMClient.html",
    "title": "Class LocalLLMClient | VulcanAI",
    "keywords": "Class LocalLLMClient Namespace VulcanAI.Core.LLM Assembly VulcanAI.dll Implements the ILLMClient interface for local language model services, supporting both OpenAI-compatible and LM Studio formats. The client handles prompt validation, token limits, and response deserialization. public class LocalLLMClient : ILLMClient Inheritance object LocalLLMClient Implements ILLMClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LocalLLMClient(IHttpClient, string, string, ILogger<LocalLLMClient>, bool) Initializes a new instance of the LocalLLMClient class. public LocalLLMClient(IHttpClient httpClient, string model, string baseUrl, ILogger<LocalLLMClient> logger, bool useOpenAIFormat = true) Parameters httpClient IHttpClient The HTTP client used to communicate with the LLM service. model string The name of the language model to use. baseUrl string The base URL of the LLM service. logger ILogger<LocalLLMClient> The logger instance for recording diagnostic information. useOpenAIFormat bool Whether to use the OpenAI API format for requests. If false, uses LM Studio format. Remarks The client supports two request formats: OpenAI format: Uses the standard OpenAI API request structure LM Studio format: Uses a simplified request structure compatible with LM Studio Both formats use the same endpoint (/v1/chat/completions) but with different request bodies. Properties MaxPromptLength Gets or sets the maximum length of prompts that can be sent to the LLM. public int MaxPromptLength { get; set; } Property Value int Remarks This value is used to validate prompts before sending them to the LLM. The default value is 4096 tokens, which is a common limit for many language models. Methods GetCompletionAsync(string) Gets a completion from the language model. public Task<string> GetCompletionAsync(string prompt) Parameters prompt string The prompt to send to the language model. Returns Task<string> A task that represents the asynchronous operation. The task result contains the model's response. Remarks This method sends a prompt to the language model and returns its response. The response format depends on whether the client is configured to use the OpenAI-compatible format or the LM Studio format. In either case, the method extracts the completion text from the response and returns it as a string. Exceptions ArgumentNullException Thrown when the prompt is null or empty. InvalidOperationException Thrown when the prompt exceeds the maximum length or when no completion is returned. GetCompletionAsync<T>(string, Dictionary<string, object>?) Gets a completion from the LLM and deserializes it into the specified type public Task<T> GetCompletionAsync<T>(string prompt, Dictionary<string, object>? options = null) where T : class Parameters prompt string The prompt to send to the LLM options Dictionary<string, object> Additional options for the completion Returns Task<T> The deserialized completion Type Parameters T The type to deserialize the completion into Exceptions ArgumentNullException Thrown when the prompt is null or empty InvalidOperationException Thrown when the prompt length exceeds MaxPromptLength or deserialization fails"
  },
  "api/VulcanAI.Core.LLM.OpenAIClient.html": {
    "href": "api/VulcanAI.Core.LLM.OpenAIClient.html",
    "title": "Class OpenAIClient | VulcanAI",
    "keywords": "Class OpenAIClient Namespace VulcanAI.Core.LLM Assembly VulcanAI.dll public class OpenAIClient : ILLMClient Inheritance object OpenAIClient Implements ILLMClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OpenAIClient(string, string, IHttpClient, ILogger<OpenAIClient>) public OpenAIClient(string apiKey, string model, IHttpClient httpClient, ILogger<OpenAIClient> logger) Parameters apiKey string model string httpClient IHttpClient logger ILogger<OpenAIClient> Properties MaxPromptLength Maximum length of the prompt that can be sent to the LLM public int MaxPromptLength { get; set; } Property Value int Methods GetCompletionAsync(string) Gets a completion from the LLM public Task<string> GetCompletionAsync(string prompt) Parameters prompt string The prompt to send to the LLM Returns Task<string> The completion from the LLM Exceptions ArgumentNullException Thrown when the prompt is null or empty InvalidOperationException Thrown when the prompt length exceeds MaxPromptLength GetCompletionAsync<T>(string, Dictionary<string, object>?) Gets a completion from the LLM and deserializes it into the specified type public Task<T> GetCompletionAsync<T>(string prompt, Dictionary<string, object>? options = null) where T : class Parameters prompt string The prompt to send to the LLM options Dictionary<string, object> Additional options for the completion Returns Task<T> The deserialized completion Type Parameters T The type to deserialize the completion into Exceptions ArgumentNullException Thrown when the prompt is null or empty InvalidOperationException Thrown when the prompt length exceeds MaxPromptLength or deserialization fails"
  },
  "api/VulcanAI.Core.LLM.html": {
    "href": "api/VulcanAI.Core.LLM.html",
    "title": "Namespace VulcanAI.Core.LLM | VulcanAI",
    "keywords": "Namespace VulcanAI.Core.LLM Classes GeminiClient HttpClientWrapper Wrapper class that implements IHttpClient by delegating to a real HttpClient instance. LLMClient LocalLLMClient Implements the ILLMClient interface for local language model services, supporting both OpenAI-compatible and LM Studio formats. The client handles prompt validation, token limits, and response deserialization. OpenAIClient Interfaces ILLMClient Interface for LLM clients"
  },
  "api/VulcanAI.Core.html": {
    "href": "api/VulcanAI.Core.html",
    "title": "Namespace VulcanAI.Core | VulcanAI",
    "keywords": "Namespace VulcanAI.Core Classes AgentContextData Represents the data structure used for serializing and deserializing the agent context."
  },
  "api/VulcanAI.Infrastructure.Configuration.DiscordConfig.html": {
    "href": "api/VulcanAI.Infrastructure.Configuration.DiscordConfig.html",
    "title": "Class DiscordConfig | VulcanAI",
    "keywords": "Class DiscordConfig Namespace VulcanAI.Infrastructure.Configuration Assembly VulcanAI.dll Represents the configuration settings for the Discord interface. public class DiscordConfig Inheritance object DiscordConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets or sets the ID of the Discord channel to monitor. public ulong ChannelId { get; set; } Property Value ulong Token Gets or sets the Discord bot token. public string Token { get; set; } Property Value string"
  },
  "api/VulcanAI.Infrastructure.Configuration.html": {
    "href": "api/VulcanAI.Infrastructure.Configuration.html",
    "title": "Namespace VulcanAI.Infrastructure.Configuration | VulcanAI",
    "keywords": "Namespace VulcanAI.Infrastructure.Configuration Classes DiscordConfig Represents the configuration settings for the Discord interface."
  },
  "api/VulcanAI.Infrastructure.Discord.DiscordInterface.html": {
    "href": "api/VulcanAI.Infrastructure.Discord.DiscordInterface.html",
    "title": "Class DiscordInterface | VulcanAI",
    "keywords": "Class DiscordInterface Namespace VulcanAI.Infrastructure.Discord Assembly VulcanAI.dll Implements the IMessageInterface for Discord, allowing the agent to send and receive messages through a Discord channel. Messages longer than Discord's 2000-character limit are automatically split into multiple messages. public class DiscordInterface : IMessageInterface Inheritance object DiscordInterface Implements IMessageInterface Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DiscordInterface(DiscordSocketClient, ILogger<DiscordInterface>, string, ulong) Initializes a new instance of the DiscordInterface class. public DiscordInterface(DiscordSocketClient client, ILogger<DiscordInterface> logger, string token, ulong channelId) Parameters client DiscordSocketClient The Discord socket client. logger ILogger<DiscordInterface> The logger instance. token string The Discord bot token. channelId ulong The ID of the channel to monitor and send messages to. Properties IsReady Gets whether the Discord client is ready to send and receive messages. public bool IsReady { get; } Property Value bool ReadyTask Gets a task that completes when the Discord client is ready. public Task<bool> ReadyTask { get; } Property Value Task<bool> Methods SendMessageAsync(Message) Sends a message to the configured Discord channel. public Task SendMessageAsync(Message message) Parameters message Message The message to send. Returns Task StartAsync() Starts the Discord client and begins listening for messages. public Task StartAsync() Returns Task StopAsync() Stops the Discord client and stops listening for messages. public Task StopAsync() Returns Task Events OnMessageReceived Occurs when a message is received from Discord. public event EventHandler<Message>? OnMessageReceived Event Type EventHandler<Message>"
  },
  "api/VulcanAI.Infrastructure.Discord.html": {
    "href": "api/VulcanAI.Infrastructure.Discord.html",
    "title": "Namespace VulcanAI.Infrastructure.Discord | VulcanAI",
    "keywords": "Namespace VulcanAI.Infrastructure.Discord Classes DiscordInterface Implements the IMessageInterface for Discord, allowing the agent to send and receive messages through a Discord channel. Messages longer than Discord's 2000-character limit are automatically split into multiple messages."
  },
  "index.html": {
    "href": "index.html",
    "title": "VulcanAI Documentation | VulcanAI",
    "keywords": "VulcanAI Documentation Getting Started To get started with VulcanAI, check out our API Documentation. Contributing We welcome contributions! Please see our GitHub repository for more information on how to contribute. License This project is licensed under the MIT License - see the LICENSE file for details."
  }
}